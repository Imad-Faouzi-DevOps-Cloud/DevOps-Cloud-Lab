pipeline {
    agent any

    environment {
        IMAGE_NAME = "taskmanager-api"
        DOCKER_REGISTRY = "docker.io"
        GCP_PROJECT = "devops-lab-464007"
        GCP_CLUSTER = "taskmanager-cluster"
        GCP_ZONE = "us-central1-f"
        DEPLOY_NAMESPACE = "default"
        VERSION = "${env.GIT_COMMIT.take(7)}"
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup Python Environment') {
            steps {
                dir('taskmanager-api') {
                    sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                    '''
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                dir('taskmanager-api') {
                    sh '''
                    . venv/bin/activate
                    echo "Running flake8..."
                    flake8 app tests || true
                    '''
                }
            }
        }

        stage('Unit Tests') {
            steps {
                dir('taskmanager-api') {
                    sh '''
                    . venv/bin/activate
                    export PYTHONPATH=$(pwd)
                    echo "Running unit tests..."
                    # pytest tests/unit --junitxml=unit-test-results.xml
                    '''
                }
            }
        }

        stage('Integration Tests') {
            steps {
                dir('taskmanager-api') {
                withCredentials([
                    string(credentialsId: 'DATABASE_URL2', variable: 'DATABASE_URL2'),
                    string(credentialsId: 'JWT_SECRET_KEY2', variable: 'JWT_SECRET_KEY2')
            ]) {
                    script {
                        try {
                            sh '''
                            . venv/bin/activate
                            pip install pyyaml
                            echo "Starting test PostgreSQL container..."
                            docker run -d \
                              --name test-postgres \
                              -e POSTGRES_USER=testuser \
                              -e POSTGRES_PASSWORD=testpass \
                              -e POSTGRES_DB=testdb \
                              -p 5432:5432 \
                              postgres:13

                            echo "Waiting for PostgreSQL to become ready..."
                            until pg_isready -h localhost -p 5432; do
                              sleep 1
                            done

                            echo "Running integration tests..."
                            . venv/bin/activate
                            export PYTHONPATH=$(pwd)
                            DATABASE_URL="postgresql://testuser:testpass@localhost:5432/testdb" \
                            pytest tests/integration --junitxml=integration-test-results.xml
                            '''
                        } finally {
                            sh 'docker rm -f test-postgres || true'
                        }
                    }
                }
            }
        }
        }

        stage('Build Docker Image') {
            steps {
                dir('taskmanager-api') {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                        script {
                            docker.withRegistry('', 'dockerhub-creds') {
                                dockerImage = docker.build("${DOCKERHUB_USER}/${IMAGE_NAME}:${VERSION}", "--cache-from ${DOCKERHUB_USER}/${IMAGE_NAME}:latest .")
                            }
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                dir('taskmanager-api') {
                    withCredentials([
                        usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS'),
                        file(credentialsId: 'GCR_CREDENTIALS', variable: 'GCLOUD_KEY')
                    ]) {
                        script {
                            sh 'echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin'
                            sh "docker push ${DOCKERHUB_USER}/${IMAGE_NAME}:${VERSION}"

                            sh 'gcloud auth activate-service-account --key-file=$GCLOUD_KEY'
                            sh 'gcloud auth configure-docker'

                            def gcrImage = "gcr.io/${GCP_PROJECT}/${IMAGE_NAME}:${VERSION}"
                            sh "docker tag ${DOCKERHUB_USER}/${IMAGE_NAME}:${VERSION} ${gcrImage}"
                            sh "docker push ${gcrImage}"
                        }
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                deployToGKE("staging")
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                deployToGKE("production")
            }
        }
    }

    post {
        always {
        archiveArtifacts artifacts: '**/integration-test-results.xml', allowEmptyArchive: true
        junit '**/integration-test-results.xml'
            cleanWs()
        }
        success {
            echo "✅ CI/CD pipeline succeeded."
            // Optional Slack/Email notification here
        }
        failure {
            echo "❌ CI/CD pipeline failed."
            // Optional Slack/Email notification here
        }
    }
}

// Shared deployment function
def deployToGKE(env) {
    dir('taskmanager-api') {
        withCredentials([file(credentialsId: 'GKE_CREDENTIALS', variable: 'GCLOUD_KEY')]) {
            def IMAGE_TAG = GIT_COMMIT.take(7)
            sh """
                set -e
                echo "Deploying to ${env} with image tag: ${IMAGE_TAG}"
            
                gcloud auth activate-service-account --key-file=$GCLOUD_KEY
                gcloud config set project ${GCP_PROJECT}
                gcloud container clusters get-credentials ${GCP_CLUSTER} --zone ${GCP_ZONE}
            
                kubectl apply -f k8s/deployment.yaml
                kubectl apply -f k8s/service.yaml
                kubectl set image deployment/taskmanager-api taskmanager-api=gcr.io/${GCP_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}
                kubectl rollout status deployment/taskmanager-api
            
                kubectl get rs -l app=taskmanager-api --sort-by=.metadata.creationTimestamp \
                  | awk 'NR>1 {print \$1}' \
                  | head -n -1 \
                  | xargs -r kubectl delete rs || true
            """
        }
    }
}
